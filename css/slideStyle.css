:root {
    --width: 400px;
    --speed: 2000ms;
}

html {
    height: 100%;
}

body {
    margin: auto;
    position: absolute;
    min-height: 100%;
    min-width: 100%;
    width: 80%;
    background: linear-gradient(rgb(243, 255, 131), rgb(180, 117, 59));
}

input {
    width: 90%;
    border: 3px solid rgb(0, 0, 0);
    padding: 2%;
    text-align: center;
    font-size: 1.5rem;
    color: rgb(17, 114, 114);
    border-radius: 2rem;
    margin: 1rem auto;
}

nav li {
    list-style: none;
}

nav>li {
    float: top;
}

nav ul::after {
    content: "";
    display: block;
    clear: both;
}

nav li a {


    display: inline-block;
    /* padding: 10px 20px; */
    text-align: left;
    text-decoration: none;
    color: rgb(146, 0, 73);
    /* width: 80px; */
}

nav li a:hover {
    background-color: rgba(17, 196, 209, 0.336);
}

nav ul {
    display: none;
    position: absolute;
    float: center;
    left: 40%;
    width: 8%;
    padding: 4% 0 2% 1.2%;
    margin: auto;
}

nav ul li {
    position: relative;
}

nav ul a {
    padding: 0 30% 0 30%;
}

nav li:hover ul {
    display: block;
    z-index: 100;
    /* Отображать поверх всего */
}

.head {
    display: flex;
    /*flex-direction: column-reverse;
    align-items: center;*/
    flex-direction: row;
    align-items: center;
    justify-content: center;
    /* border: 10px solid rgb(83, 162, 110); */

}

.notifications {

    display: flex;
    flex-direction: row;

    width: 50%;
    height: 4rem;
}

.noteBox {

    display: flex;
    flex-direction: column;
    width: 25%;
    height: 3.6rem;
    justify-content: center;
    align-items: center;
    /* border: 1px solid rgb(32, 186, 64); */
    font-weight: bold;
    font-size: 2.5rem;
    color: rgb(18, 111, 134);
    /* color: rgb(38, 8, 107); */
}

#timer {
    margin: auto;
    align-items: center;
}

.game {
    display: flex;
    /* border: 1px solid rgb(21, 2, 105); */
    justify-content: center;


}

.gameMainWindow {
    display: flex;
    /*flex-direction: column-reverse;
    align-items: center;*/
    flex-direction: row;
    align-items: flex-end;
    justify-content: center;

    text-align: center;
    font-size: 1.5rem;
    color: rgb(2, 107, 133);

    /* border-top: 10px solid rgb(32, 186, 64); */
    border-bottom: 5px solid rgb(0, 0, 0);

    /* width: 35%; */
    width: 50%;
    max-width: 500px;
    height: 500px;
    max-height: 500px;
}

.gameSideWindow {
    display: flex;
    flex-direction: column;
    align-items: center;

    /* border-top: 10px solid rgb(70, 162, 181); */
    border-bottom: 5px solid rgb(0, 0, 0);

    /* width: 20%; */
    width: 25%;
    height: 500px;
    max-width: 260px;
    max-height: 500px;
}

/* #game1 {
    border-left: 10px solid rgb(70, 162, 181);
}

#game2 {
    border-right: 10px solid rgb(70, 162, 181);
} */

.buttons {
    display: flex;
    justify-content: center;

    /* border: 10px solid rgb(83, 162, 110); */

}

.btn {
    font-size: 2rem;
    /*Отступы рамок от текста*/
    padding: 0.5rem 2rem;
    border: 3px solid black;
    border-radius: 2rem;
    margin: 1rem;
    display: block;
    background: rgba(149, 255, 140, 0.692);
    /* top: 80px; */
}

.btn:active {
    background: rgb(230, 233, 52);
}

.block {
    display: flex;
    height: 20px;
    width: 100px;
    border: 1px solid black;

    position: relative;

    box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.5);
}

.vertical {
    transform: rotateZ(90deg);
}

.name {
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    font-style: italic;
    padding: 2%;

    /* border: 1px solid rgb(39, 25, 122); */
}

.animationFall {

    animation-duration: 2000ms;

    animation-name: animationFall;
    animation-timing-function: ease-in;


    animation-iteration-count: infinite;
    /*transition: transform 5000ms ease-in;*/
    /*animation: infinite linear;*/

}

.content:hover block.animationFall {
    animation-name: none;
}


@keyframes animationFall {
    0% {
        top: 0px;
        transform: rotateZ(0deg);
    }

    100% {
        top: 485px;
        transform: rotateZ(180deg);
    }

}





/* #myMostBrilliantPyramide {
    display: none;
}
.gameMainWindow {
    display: none;
}

#bestResult:hover + .gameMainWindow {
    display: flex;
    color: red;
    z-index: 100;
} */








.toggle {
    /* --width: 80px;
    --height: calc(var(--width) / 3); */
    /* display: flex;
    justify-content: center; */
    padding: 0.5rem 2rem;
    margin: 1rem;
    position: relative;
    /* display: inline-block; */
    font-size: 1.1rem;
    width: 8rem;
    height: 2.5rem;
    border: 3px solid black;
    border-radius: 2rem;
    /* box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3); */
    cursor: pointer;
}

.toggle input {
    display: none;
}

.toggle .labels {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* font-size: 1rem; */
    font-family: sans-serif;
    transition: all 0.4s ease-in-out;
}

.toggle .labels::after {
    content: attr(data-off);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    color: black;
    background-color: #f19999;
    /* text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4); */
    transition: all 0.4s ease-in-out;
    border-radius: 2rem;
}

.toggle .labels::before {
    content: attr(data-on);
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    color: black;
    background-color: rgba(149, 255, 140, 0.692);
    text-align: center;
    opacity: 0;
    /* text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.4); */
    transition: all 0.4s ease-in-out;
    border-radius: 2rem;
}

.toggle input:checked~.labels::after {
    /* flip 180deg */
    transform: rotateY(180deg);
    opacity: 0;
}

.toggle input:checked~.labels::before {
    transform: rotateY(180deg) scale(-1, 1);
    opacity: 1;
}

/*

Клиентское приложение на языке JS
Приложение сохранить как отдельный модуль с именем Game_LastName_GameTitle.

Миниавторизация.
Должны быть реализованы различные виды событий (нажатие, перемещение, двойной клик, наведение . . .)
Ограничение работы приложения по времени.
Ускорение работы программы, в зависимости от уровня сложности.
Проверка окончания игры (по времени, по баллам, ...)
Продумать логику игры.
Обязателен подсчет баллов, штрафные балы, изменение баллов от уровня сложности.
Динамическое создание элементов.
Возможность смены цветовой палитры.
Допускается использование внешних графических библиотек.
Данные после каждой игры сохраняются (localstorage, JSON) и передаются на другую страницу, для данного пользователя.
Вывод последних результатов.
Анимация элементов.
Индивидуальное обсуждение задания для проекта.

*/